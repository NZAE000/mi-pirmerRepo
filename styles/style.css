/*Estilo en cascada:
	
		jerarquia:				!important
								estilo en linea
								identificadores	(id)
								clases			(class)
								pseudo-clases   (ej: hover)
								atributos		
								elementos
								pseudo-elementos

		conceptos:				*Responsive-design: adaptar la pagina a distintos dispositivos: moviles, pc, tablets, etc.
								*Medidas fijas(absolutas): cm, mm, pt, in, pc. Son aquellas que especifican una medida en términos absolutos, sin tener en cuenta el contexto donde se están aplicando.
								*Medidas relativas:
													%: porcentaje (depende de la caja que contiene tal elemnto)
													em: Altura de la fuente
													rem: Root-em
													vw: Viewport width
													vh: Viewport Height
													vmin: Viewport menor, entre altura o anchura
													vmax: Viewport mayor, entre altura o anchura
													ex: anchura de la fuente para la letra "x"
													ch: la anchura del carácter "0" (cero)

										Las unidades relativas de CSS son aquellas que tienen en cuenta el contexto donde se encuentran. Son relativas a las dimensiones del contenedor donde se han definido.

								*BOX-MODEL:
										-line-height: modifica el espacio vertical del texto.
										-text-aling: posiciona el texto de un contenedor(center, left, right).

										-diplay:
											inline: el elemento se renderizará en línea con otros elementos.
											block: hace que el comportamiento del elemento sea como un bloque. Los elementos hijos en block se adecuan al tamaño de la caja del padre.
											inline-block: se redereiza en linea con otros elementos pero a su vez adquiere propiedades como establecer un ancho y alto en el elemento.
										
										-box-sizing:
											border-box: Al cambiar de tamaño de alguna caja (ej: widht, height), no considera si el contenido tiene algun borde (border) o relleno (padding). 
											content-box: Si es que el contenido tiene borde o relleno, los considera al momento aplicar cambios de tamaño de la caja.

										-box-shadow: para la sombra. Parametros: (px(en X), px(en Y), px(desenfoque)), px(grosor borde), color).

										-padding:
												Para separar la distancia entre el contenido y los bordes de su caja. 
												Separacion en top, right, bottom y left (parametricamente funciona ej: padding: 10px 10px 20px 20px;)
										-border:
											
											border-radius: para redondear las esquinas de la box.
											border-top-width, border-right-width, border-botton-width, border-left-width: aumentar grosor;
											border color: para el color deborde.
											etc..
											Para simplificar estas propíedades en border:
												border: grosor(general) estilo(solid, dashed, double, groove, ridge, inset, outset) color;
											

										-margin:
												Para separar distancia entre una box a otra. Tales son top, right, bottom y left (parametricamente funciona ej: margin: 10px 10px 20px 20px)

										-position:
											static; los elementos se posicionan de acuerdo al flujo normal de la página. Es la posición natural de los elementos. No son afectados por las propiedades top, bottom, left y right.
											relative; los elementos se posicionan de forma relativa a su posición normal.
											fixed; los elementos se posicionan de forma relativa a la ventana del navegador. Su posición permanece fija aunque se desplace la ventana.
											absolute; los elementos se posicionan de forma relativa al primer elemento padre que tenga una posición distinta a static.

										-overflow: La propiedad CSS overflow especifica: si recortar contenido, dibujar barras de desplazamiento o mostrar el contenido excedente en un elemento a nivel de bloque.
										-transition: Las transiciones CSS le permiten cambiar los valores de propiedad sin problemas, durante un período determinado. Pase el mouse sobre el elemento de abajo para ver un efecto de transición de CSS(con all cabian todas las propiedades dictadas en ese trancurso de tiempo).
										-float: La propiedad float ubica un elemento al lado izquierdo o derecho de su contenedor, permitiendo a los elementos de texto y en línea aparecer a su costado. El elemento es removido del normal flujo de la página, aunque aún sigue siendo parte del flujo (a diferencia del posicionamiento absoluto).


								*Pseudo-elementos:

									Los pseudo-elementos en CSS son un mecanismo para acceder a partes del HTML(elementos) que no tienen asociado un nodo en el DOM. Por ejemplo, está claro que una «parte de nuestro documento» podría ser «la primera línea de un párrafo», «la primera letra de un párrafo» o «la selección que ha hecho el usuario». 
									selector::pseudo-elemento { propiedad: valor; }

										-first-line: no aplicable para 'display: inline'. El Pseudoelemento ::first-line aplica estilos a la primera línea de un elemento de bloque. Nótese que la longitud de la primera línea depende de muchos factores, incluyendo el ancho del elemento, el ancho del documento y el tamaño de fuente del texto.
										-fisrt-letter: el pseudo-elemento ::first-letter aplica estilos a la primera letra de la primera línea un elemento de bloque, sólo cuando no es precedido de otro contenido (como imágenes o tablas).
										-placeholder: El pseudo-elemento CSS  ::placeholder representa el texto provisional en un elemento <input> o un elemento <textarea>.
										-selection: El ::selection selector coincide con la parte de un elemento que selecciona un usuario(destaca). Solo se pueden aplicar algunas propiedades CSS al ::selector de selección: color, fondo, cursor y contorno.
										-before: En CSS, ::before crea un pseudoelemento que es el primer hijo del elemento seleccionado. Es usado normalmente para añadir contenido estético a un elemento, usando la propiedad content. Este elemento se muestra en línea con el texto de forma predeterminada.
										-after: En CSS, ::after crea un pseudo-elemento que es el último hijo del elemento seleccionado. Es comunmente usado para añadir contenido cosmético a un elemento con la propiedad content.Es en linea (inline) de forma predeterminada.
												
															a::after/before {
																 content: "→";
															}

								*Pseudo clases(eventos): elemento: pseudo-clase{};

									hover: se adquiqeren propiedaes a tal elemento que es indicado con el escenario de pasar por encima con el mouse;
									link: se adquieren pripiedades a los elementos a para indexar. Esas porpiedades existen solo si no fue visitada la pagina.
									visited: se comporta como la pseudo clase link pero cuando la pagina ya se visitó.
									active: se adiquieren propiedes a elemento donde son indicados por el evento de matener/presionar el click del mause.
									focus: se adquieren propiedades enfocado al elemento input, es decir al precienar dentro del input para alguna entrada.

								*Object-fit: La propiedad CSS object-fit indica cómo el contenido de un elemento reemplazado, por ejemplo un <img> o <video>, debería redimensionarse para ajustarse a su contenedor.
									object-fit: 'modo';

									contain: El contenido reemplazado está dimensionado para mantener su relación de aspecto mientras se ajusta dentro del cuadro de contenido del elemento.
									cover: El contenido reemplazado se dimensiona para mantener su relación de aspecto mientras llena el cuadro de contenido completo del elemento. Si la relación de aspecto del objeto no coincide con la relación de aspecto de su caja, entonces el objeto se recortará para que se ajuste.
									none: El contenido reemplazado no se redimensiona.
									scale-down: Elije la resolucion o el modo que mas convenga de acuerdo al contenedor.El contenido se dimensiona como si none o contain estuvieran especificados, lo que resultaría en un tamaño de objeto concreto más pequeño.

								*Object-position: determina el alineamiento del elemento dentro de la caja.
									object-position: 'modo'; (left, right, top, bottom, px, em , %, etc).

								*Cursor: especifica el tipo de cursor que se mostrara cuando este se encuentre sobre un elemento.									
									cursor: (pinte, row-resize, progress, copy)(modo); referecnia: https://www.w3schools.com/cssref/tryit.asp?filename=trycss_cursor.
								

								*flex-box: Diseño de Caja Flexible, comúnmente conocido como Flexbox​, es un modelo de diseño CSS3. Forma de estrucutar o maquetar una pagina.
										   Nos permite alinear, llenar o distribuir el espacio entre los elementos dentro de un 'contenedor', usando anchos y alturas flexibles. Esto, lo convierte en una gran herramienta para usar en sistemas de diseño responsivo.
									
									display: flex; <- si el contenedor padre adquiere esta propiedad, sus hijos o items seran flexibles (flex-items: solo sus hijos directos).

									flex-direction: cambia la direccion del main axis(eje x) a cross axis(eje y) o viceversa.
										-row: ordena todos sus items en fila (main axis, por defecto).
										-colum: ordena todos sus items en columna (cross axis).					
										-row-reverse: cambia el sentido del main axis(de derecha a izquierda) y ordena los items de esa forma.
										-colum-reverse: cambia el sentido del crossa axis(de abajo hacia arriba) y ordena los items de esa forma.

									flex-wrap: especifica si los elementos flexibles deben ajustarse o no.
										-wrap: especifica que los elementos flexibles se envolverán si es necesario(apilar al sentido del cross axis)
										-nowrap: valor por defecto. Especifica que los elementos flexibles no se envolverán.
										-wrap-reverse: Especifica que los elementos flexibles se envolverán, si es necesario, en orden inverso(apilar al contra-sentido del cross axis).

									flex-flow: abrevia las dos propiedes anteriores.
										flex-flow: colum wrap / row wrap / etc;

									justify-content: alinea los elementos del contenedor flexible cuando los elementos no utilizan todo el espacio disponible en el eje principal (horizontalmente).
										-center: los elementos o hijos directos del contenedor flex se colocan en el centro del contenedor.
										-space-around: Los elementos o hijos directos del contenedor flex tendrán espacio antes, entre y después de ellos.
										-space-between: Los elementos o hijos directos del contenedor flex  tendrán espacio entre ellos.
										-space-evenly: Los elementos tendrán el mismo espacio a su alrededor.

									align-items: especifica la alineación predeterminada para los elementos dentro del contenedor flexible (vertical)(utilizable para 'una linea' de items, ya que si se utiliza 'flex-wrapp: wrap', si se encoje la pagina la seguna linea pasa al centro. Para que no ocurra esto se utiliza align-content).
										-strech: por defecto. los elementos hijos directos del contenedor flexible se estiran a lo largo del cross axis para adaptarse al contenedor.
										-center: los elementos hijos directos del contenedor flexible se colocan en el centro del contenedor.
										-flex-end: los elementos hijos directos del contenedor flexible se colocan al final del contenedor.
										-flex-start: los elementos hijos directos del contenedor flexible se colocan al principio del contenedor.
										-baseline: los elementos hijos directos del contenedor flexible se colocan en la línea de base del contenedor.

									align-content: modifica el comportamiento de la propiedad flex-wrap. Es similar a align-items , pero en lugar de alinear elementos flexibles, alinea 'líneas' flexibles.

								*flex-items: propiedades solo para elementos o items flexibles, es decir, elementos dentro de un contenedor con display: flex.

									align-self: especifica la alineación del elemento seleccionado dentro del contenedor flexible.
										-auto: Defecto. El elemento hereda la propiedad align-items de su contenedor principal, o "estirar" si no tiene un contenedor principal.
										Los demas valores que provee esta propiedad son las mismas que tiene align-items

									margin: cuando los elementos o hijo directos son flex(estan dentro de un contenedor flex), el margin actua de manera contraria al margen normal. Es decir, si se le da un margin-lef, el margen izquierdo se engruesa de izquierda a derecha.
											Con margin: auto, centras el elemento al centro del contenedor flex.

									flex-grow: especifica cuánto crecerá el elemento-flex en relación con el resto de los elementos flexibles dentro del mismo contenedor (todos (o solo un elemento del contenedor) crece/n en proporcion al espacio que sobra del contenedor).
										flex-grow: 1,2,3..; (Un número que especifica cuánto crecerá el artículo en relación con el resto de los artículos flexibles. El valor predeterminado es 0).
									
									flex-shrink: especifica cómo se encogerá un elemento flex en relación con el resto de los artículos flexibles dentro del mismo contenedor..
										flex-shrink: 0, 1,2,3..; (Un número que especifica cuánto se encogerá el artículo en relación con el resto de los artículos flexibles. El valor predeterminado es 1. Con 0 no encoge).

									flex-basis: especifica la longitud inicial(como width, pero con mas jerarquia) de un elemento flexible(item dentro de u contenedor flex).

									flex: abrevia las tres propiedes anteriores.
										flex: 1(grow) 0(shrink) 350px(basis);

									order: especifica el orden de un elemento flexible en relación con el resto de los elementos flexibles dentro del mismo contenedor (Es como el z-index, pero en vez del eje z es en direccion al main axis).
										order: 1,2,3...; (Valor predeterminado 0. Especifica el orden del artículo flexible).

*/										

/**{ 							'*' selector universal, osea selecciona todos los elementos del html.
	color: red;
}*/

/*h2, h3, ol, etc.. {			selector por elemento.
	color: red;
}*/

/*.lista-ejemplos{				selector por clase (usad cuando un etiqueta padre otorgue una propiedad que compartan todas sus etiquetas hijas).
	color: green;
}*/

/*#Descripcion{		     		selector por id (el valor de id debe ser unico para un elemento(tratar de no usar mas elementos con el mismo valor de id)).
	color: yellow;
}*/


/*li[id="index-pag2"]{			selector por atributo (cuando varias etiquetas comparten "el mismo nombre de atributo", pero refiriendose a tal con un valor en particular)
	color: pink;
}*/

body{
	display: flex; 
	flex-direction: column; 		/*sus hijos directos(header y footer) se ordenearan en columnas.*/
	background-color: #99ff9999;
	min-height: 120vh;
}
body img[src="img/html.png"]{
	position: absolute; top: 12.5em; right: 6.5em;
	z-index: -1;
}

/*---------------------------------------------------------------------------------------------------------------*/

header{
	width: 100vw;				/*viewport: medidas relativas para el renderizado en dispositivos(se adapta a las medidas del hardware)*/
	height: 10vh;
	background-color: #00330c99;
	opacity: 95%;				 /*trasnparencia*/
}
header a{
	font-size: 3em; 			/*1em = 16px 'en general' (dependiendo del navegador).*/
	position: fixed; left: 85%; top: 13px;
	border-radius:6px;
	box-shadow: 3px 3px 10px 5px #045, 3px 3px 10px 5px #045, 3px 3px 10px 5px #045;
	transition: all 0.4s;
	color: #069;	
	text-shadow: 2px 2px 5px #87ceeb;
}

header a:hover{
	transform: scale(1.1);
	transition: all 0.4s;
}

/*---------------------------------------------------------------------------------------------------------------*/

#bienvenido{
	width: 100vw;
	height: 30vh;
}
#bienvenido h1{
	margin-top: .3em;
	display: inline-block; 		/*se comporta como un elemento en linea, pero adquiere las propiedades de un elemento en bloque*/	
	width: 500px;				/*aumento del ancho de la caja(tambien con height)*/
	padding-left: .5em;
	color:#045;
	font-size: 4.5em;
}

/*---------------------------------------------------------------------------------------------------------------*/

h2{
	margin: 0.4em 0;
	padding-left: 1em;
	color: #045;
	font-size: 2.5em;
}
#Descripcion{
	line-height: 12vh;
	text-align: center;
	text-shadow: 3px 3px 5px #87ceeb, 2px 2px 5px #87ceeb, 2px 2px 5px #87ceeb;
}
#Descripcion p{
	color: #059;
}
#Descripcion p a{		   		/*selector por descendiente(de tal elemento con id(y tambien posible por clase) selecciono un hijo(en su ambito {}) y asi ..)*/
	color: #069;
	transition: all 0.2s;
} 
#Descripcion p a:hover{		   	/*:hover = pseudo-clase*/
	font-size: 1.07em;
	color: #00660099;
	transition: all 0.3s;
} 

/*---------------------------------------------------------------------------------------------------------------*/

h3{
	height: 10vh;
	padding-left: 3em;
	padding-top: 1.5em;
	font-size: 25px; 
	color: #055;
}
#lista_ejem{
	display: inline-block;
	position: relative; left: 20vw;
	margin-top: 2vh;
	font-size: 16px;
}
.ejem__index a{
	display: inline-block;
	height: 35px;
	margin-top: 5px;
	margin-bottom: 5px;
	font-size: 1.2em; 			/*para todos sus nodos hijos, el font size para la medida relativa 1em= 16px. la unidad em es escalable y siempre depende de su elemento padre. Como lista_ejem es la caja padre, entonces para la propiedad font-size, 1em = 16px*/
	/*line-height: 2;			las letras por defecto ocupan 1 line-height, osea 0.5 hacia arriba y hacia abajo de 'ESPACIO' (su caja) desde 'el centro de cada letra'(osea el espacio por defecto que ocpupa la letra). En este caso le decimos que ocupe 0.6*/
	border-radius: 3px;
	color: #059;
	box-shadow: 2px 2px 10px 1px #045;
	transition: all 0.7s;
}
.ejem__index a:hover{ 				
	font-weight: 800;
	background-color: #a7f1a7;
	color: #0809;
	text-shadow: 1px 1px 10px #00cc0066;
	transform: scale(1.12);
	transition: all 0.7s;

}
/*.ejem__index--active{ para darle propiedades solo a la etiqueta de esa clase que tiene el posfijo --active en html(se puede cambiar el posfijo a otras etiqueta manipulando con js).
	color: #059;
}*/

/*---------------------------------------------------------------------------------------------------------------*/



footer p1,p2{
	line-height: 2;
	color:gold;
}

#redes-sociales{
	display: inline-block;
	width: 34.5vw;
	position: relative;left: 65vw;
	/*z-index: -1; ya que redes-sociales es hijo de footer y se sobrepone en lac caja footer, z-index al decirle -1 se anula footer pasaria a interponer en su hijo.*/
}
.contacto{
	width: 80px;
	margin-left: 2vw;
	font-family: Century Gothic;
	color: white;
	text-shadow: 2px 2px 7px #fff;	
}
.contacto:hover{
	color: gold;
}
.contacto img{
	margin-left: .5em;
}
footer p2{
	display: block;
	width: 38vw;
	position: relative;left: 65vw;
}
footer p2 i{
	position: relative; left: 20px;
	color :#891010;
	text-shadow: 1px 1px 3px pink;
	font-family: Century Gothic;
}

footer{
	width: 100vw;
	height: 8.5vh;
	position: fixed; bottom: 0.05vh;
	background-color: #1d511599;
	opacity: 95%;
}